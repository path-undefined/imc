import { TokenDefinition } from "./types";

export const tokenDefinitions: TokenDefinition[] = [
  { type: "line_comment", matcher: /^\/\/.*(\r\n|\r|\n|$)/u },
  { type: "trash_character", matcher: /^[ \t\r\n]+/u },
  
  { type: "keyword_import", matcher: "import" },
  { type: "keyword_export", matcher: "export" },
  { type: "keyword_as", matcher: "as" },
  { type: "keyword_include", matcher: "include" },
  { type: "keyword_from", matcher: "from" },
  { type: "keyword_loop", matcher: "loop" },
  { type: "keyword_with", matcher: "with" },
  { type: "keyword_while", matcher: "while" },
  { type: "keyword_do", matcher: "do" },
  { type: "keyword_then", matcher: "then" },
  { type: "keyword_break", matcher: "break" },
  { type: "keyword_continue", matcher: "continue" },
  { type: "keyword_decision", matcher: "decision" },
  { type: "keyword_about", matcher: "about" },
  { type: "keyword_case", matcher: "case" },
  { type: "keyword_if", matcher: "if" },
  { type: "keyword_otherwise", matcher: "otherwise" },
  { type: "keyword_const", matcher: "const" },
  { type: "keyword_public", matcher: "public" },
  { type: "keyword_private", matcher: "private" },
  { type: "keyword_type", matcher: "type" },
  { type: "keyword_var", matcher: "var" },
  { type: "keyword_func", matcher: "func" },
  { type: "keyword_return", matcher: "return" },
  { type: "keyword_enum", matcher: "enum" },
  { type: "keyword_struct", matcher: "struct" },
  { type: "keyword_extend", matcher: "extend" },
  { type: "keyword_friend", matcher: "friend" },
  { type: "keyword_union", matcher: "union" },
  { type: "keyword_value", matcher: "value" },
  { type: "keyword_sizeof", matcher: "sizeof" },

  { type: "symbol_&", matcher: "&"},
  { type: "symbol_*", matcher: "*"},
  { type: "symbol_(", matcher: "(" },
  { type: "symbol_)", matcher: ")" },
  { type: "symbol_^", matcher: "^"},
  { type: "symbol_<", matcher: "<" },
  { type: "symbol_<=", matcher: "<=" },
  { type: "symbol_>", matcher: ">" },
  { type: "symbol_>=", matcher: ">=" },
  { type: "symbol_->", matcher: "->" },
  { type: "symbol_:", matcher: ":" },
  { type: "symbol_::", matcher: "::" },
  { type: "symbol_,", matcher: "," },
  { type: "symbol_{", matcher: "{" },
  { type: "symbol_}", matcher: "}" },
  { type: "symbol_$", matcher: "$" },
  { type: "symbol_@", matcher: "@" },
  { type: "symbol_.", matcher: "."},
  { type: "symbol_...", matcher: "..."},
  { type: "symbol_&&", matcher: "&&" },
  { type: "symbol_==", matcher: "==" },
  { type: "symbol_||", matcher: "||" },
  { type: "symbol_=", matcher: "="},
  { type: "symbol_!", matcher: "!" },
  { type: "symbol_!=", matcher: "!=" },
  { type: "symbol_-", matcher: "-"},
  { type: "symbol_%", matcher: "%"},
  { type: "symbol_|", matcher: "|"},
  { type: "symbol_+", matcher: "+"},
  { type: "symbol_;", matcher: ";" },
  { type: "symbol_/", matcher: "/"},
  { type: "symbol_[", matcher: "[" },
  { type: "symbol_]", matcher: "]" },
  { type: "symbol_~", matcher: "~"},

  { type: "literal_string", matcher: /^(u8|u16|u32|l)?"([^"\\]|\\.)*"([ \t\r\n]*"([^"\\]|\\.)*")*/u },
  { type: "literal_char", matcher: /^(u8|u16|u32|l)?'([^'\\]|\\.)'/u },
  { type: "literal_integer", matcher: /^(0x[0-9A-F]+(`[0-9A-F]+)*|0o[0-7]+(`[0-7]+)*|0b[01]+(`[01]+)*|[0-9]+(`[0-9]+)*)u?(c|s|i|ll|l|z|wb)?/u },
  { type: "literal_float", matcher: /^((0x(([0-9A-F]+(`[0-9A-F]+)*)|(([0-9A-F]+(`[0-9A-F]+)*)\.([0-9A-F]+(`[0-9A-F]+)*)?)|(([0-9A-F]+(`[0-9A-F]+)*)?\.([0-9A-F]+(`[0-9A-F]+)*)))p-?[0-9]+)|(([0-9]+(`[0-9]+)*e-?[0-9]+)|((([0-9]+(`[0-9]+)*\.([0-9]+(`[0-9]+)*)?)|(([0-9]+(`[0-9]+)*)?\.[0-9]+(`[0-9]+)*))(e-?[0-9]+)?)))(f|d|l)?/u },
  { type: "literal_bool", matcher: /^true|^false/u },
  { type: "literal_null", matcher: "null" },

  { type: "identifier", matcher: /^[A-Za-z_][0-9A-Za-z_]*/u },
];
